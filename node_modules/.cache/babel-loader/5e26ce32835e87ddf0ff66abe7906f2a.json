{"ast":null,"code":"import _toConsumableArray from \"/Users/ibelaev/AlfaCode/TEST/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/ibelaev/AlfaCode/TEST/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport StatementTypes from '../actions/types/statement';\n\nfunction filter(data, id) {\n  return data.filter(function (el) {\n    return el.id !== id;\n  });\n}\n\nvar initialState = {\n  status: 'INITIAL',\n  data: [],\n  error: ''\n};\nexport default function StatementsReduser() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case StatementTypes.RequestStatements:\n      return _objectSpread({}, state, {\n        status: 'RECUEST'\n      });\n\n    case StatementTypes.SuccessStatements:\n      return _objectSpread({}, state, {\n        status: 'SUCCESS',\n        data: action.payload\n      });\n\n    case StatementTypes.FaledStatements:\n      return _objectSpread({}, state, {\n        status: 'FALED'\n      });\n\n    case StatementTypes.DeleteItem:\n      return _objectSpread({}, state, {\n        data: filter(state.data, action.payload.id)\n      });\n\n    case StatementTypes.ChangeItem:\n      return _objectSpread({}, state, {\n        data: action.payload\n      });\n\n    case StatementTypes.AddStatements:\n      return _objectSpread({}, state, {\n        data: [].concat(_toConsumableArray(state.data), [action.payload])\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/ibelaev/AlfaCode/TEST/my-app/src/reducers/statements-reducer.ts"],"names":["StatementTypes","filter","data","id","el","initialState","status","error","StatementsReduser","state","action","type","RequestStatements","SuccessStatements","payload","FaledStatements","DeleteItem","ChangeItem","AddStatements"],"mappings":";;AAAA,OAAOA,cAAP,MAA2B,4BAA3B;;AAUA,SAASC,MAAT,CAAgBC,IAAhB,EAAuCC,EAAvC,EAAoE;AAClE,SAAOD,IAAI,CAACD,MAAL,CAAY,UAAAG,EAAE,EAAI;AACvB,WAAOA,EAAE,CAACD,EAAH,KAAUA,EAAjB;AACD,GAFM,CAAP;AAGD;;AAED,IAAME,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,SADW;AAEnBJ,EAAAA,IAAI,EAAE,EAFa;AAGnBK,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,SAASC,iBAAT,GAGM;AAAA,MAFnBC,KAEmB,uEAFQJ,YAER;AAAA,MADnBK,MACmB;;AACnB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,cAAc,CAACY,iBAApB;AACE,+BACKH,KADL;AAEEH,QAAAA,MAAM,EAAE;AAFV;;AAIF,SAAKN,cAAc,CAACa,iBAApB;AACE,+BACKJ,KADL;AAEEH,QAAAA,MAAM,EAAE,SAFV;AAGEJ,QAAAA,IAAI,EAAEQ,MAAM,CAACI;AAHf;;AAKF,SAAKd,cAAc,CAACe,eAApB;AACE,+BACKN,KADL;AAEEH,QAAAA,MAAM,EAAE;AAFV;;AAIF,SAAKN,cAAc,CAACgB,UAApB;AACE,+BACKP,KADL;AAEEP,QAAAA,IAAI,EAAED,MAAM,CAACQ,KAAK,CAACP,IAAP,EAAaQ,MAAM,CAACI,OAAP,CAAeX,EAA5B;AAFd;;AAIF,SAAKH,cAAc,CAACiB,UAApB;AACE,+BACKR,KADL;AAEEP,QAAAA,IAAI,EAAEQ,MAAM,CAACI;AAFf;;AAIF,SAAKd,cAAc,CAACkB,aAApB;AACE,+BACKT,KADL;AAEEP,QAAAA,IAAI,+BAAMO,KAAK,CAACP,IAAZ,IAAkBQ,MAAM,CAACI,OAAzB;AAFN;;AAIF;AACE,aAAOL,KAAP;AAjCJ;AAmCD","sourcesContent":["import StatementTypes from '../actions/types/statement';\nimport { StatementItem } from '../common-types';\nimport { GenericStatements } from '../actions/statements-actions';\n\nexport type StatementsReduser = {\n  status: string;\n  data: StatementItem[];\n  error: string;\n};\n\nfunction filter(data: StatementItem[], id: string): StatementItem[] {\n  return data.filter(el => {\n    return el.id !== id;\n  });\n}\n\nconst initialState = {\n  status: 'INITIAL',\n  data: [],\n  error: '',\n};\n\nexport default function StatementsReduser(\n  state: StatementsReduser = initialState,\n  action: GenericStatements,\n): StatementsReduser {\n  switch (action.type) {\n    case StatementTypes.RequestStatements:\n      return {\n        ...state,\n        status: 'RECUEST',\n      };\n    case StatementTypes.SuccessStatements:\n      return {\n        ...state,\n        status: 'SUCCESS',\n        data: action.payload,\n      };\n    case StatementTypes.FaledStatements:\n      return {\n        ...state,\n        status: 'FALED',\n      };\n    case StatementTypes.DeleteItem:\n      return {\n        ...state,\n        data: filter(state.data, action.payload.id),\n      };\n    case StatementTypes.ChangeItem:\n      return {\n        ...state,\n        data: action.payload,\n      };\n    case StatementTypes.AddStatements:\n      return {\n        ...state,\n        data: [...state.data, action.payload],\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}