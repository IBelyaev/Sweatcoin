"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SkipNextCircleDimensions = exports.SkipNextCircle = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var StyledIcon = React.forwardRef(function (props, ref) {
  var title = props.title,
      size = props.size,
      svgProps = (0, _objectWithoutProperties2.default)(props, ["title", "size"]);
  var iconProps = {
    viewBox: '0 0 24 24',
    height: props.height !== undefined ? props.height : size,
    width: props.width !== undefined ? props.width : size,
    // @ts-ignore - aria is not always defined on SVG in React TypeScript types
    'aria-hidden': title == null ? 'true' : undefined,
    focusable: 'false',
    role: title != null ? 'img' : undefined,
    "fill": "currentColor"
  };
  return React.createElement("svg", (0, _extends2.default)({}, iconProps, svgProps, {
    ref: ref
  }), title && React.createElement("title", {
    key: "SkipNextCircle-title"
  }, title), React.createElement("path", {
    d: "M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zM8 16V8l5 4-5 4zm8 0h-2V8h2v8z",
    key: "k0"
  }));
});
var SkipNextCircle = (0, _styledComponents.default)(StyledIcon).withConfig({
  displayName: "SkipNextCirclecjs__SkipNextCircle",
  componentId: "sc-1qo2s36-0"
})(["display:inline-block;vertical-align:middle;overflow:hidden;"]);
exports.SkipNextCircle = SkipNextCircle;
SkipNextCircle.displayName = 'SkipNextCircle';
var SkipNextCircleDimensions = {
  height: 24,
  width: 24
};
exports.SkipNextCircleDimensions = SkipNextCircleDimensions;