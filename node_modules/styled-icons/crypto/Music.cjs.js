"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MusicDimensions = exports.Music = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var StyledIcon = React.forwardRef(function (props, ref) {
  var title = props.title,
      size = props.size,
      svgProps = (0, _objectWithoutProperties2.default)(props, ["title", "size"]);
  var iconProps = {
    viewBox: '0 0 32 32',
    height: props.height !== undefined ? props.height : size,
    width: props.width !== undefined ? props.width : size,
    // @ts-ignore - aria is not always defined on SVG in React TypeScript types
    'aria-hidden': title == null ? 'true' : undefined,
    focusable: 'false',
    role: title != null ? 'img' : undefined,
    "fill": "currentColor"
  };
  return React.createElement("svg", (0, _extends2.default)({}, iconProps, svgProps, {
    ref: ref
  }), title && React.createElement("title", {
    key: "Music-title"
  }, title), React.createElement("path", {
    d: "M18.65.226A16 16 0 0 0 16 0C7.16 0 0 7.16 0 16c0 3.394 1.067 6.53 2.86 9.131 1.1-1.616 3.637-2.731 6.578-2.731 2.02 0 3.847.533 5.156 1.39L18.65.226zm8.502 4.315c2.763 6.11.339 9.374.339 9.374-1.875-5.64-7.305-6.464-7.305-6.464s-3.572 19.248-3.572 19.49c0 2.085-2.214 3.847-5.22 4.38A16.01 16.01 0 0 0 16 32c8.84 0 16-7.16 16-16 0-4.493-1.859-8.55-4.848-11.459z",
    key: "k0"
  }));
});
var Music = (0, _styledComponents.default)(StyledIcon).withConfig({
  displayName: "Musiccjs__Music",
  componentId: "czc1j9-0"
})(["display:inline-block;vertical-align:middle;overflow:hidden;"]);
exports.Music = Music;
Music.displayName = 'Music';
var MusicDimensions = {
  height: 32,
  width: 32
};
exports.MusicDimensions = MusicDimensions;