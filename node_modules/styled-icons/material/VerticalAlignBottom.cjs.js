"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VerticalAlignBottomDimensions = exports.VerticalAlignBottom = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var StyledIcon = React.forwardRef(function (props, ref) {
  var title = props.title,
      size = props.size,
      svgProps = (0, _objectWithoutProperties2.default)(props, ["title", "size"]);
  var iconProps = {
    viewBox: '0 0 24 24',
    height: props.height !== undefined ? props.height : size,
    width: props.width !== undefined ? props.width : size,
    // @ts-ignore - aria is not always defined on SVG in React TypeScript types
    'aria-hidden': title == null ? 'true' : undefined,
    focusable: 'false',
    role: title != null ? 'img' : undefined,
    "fill": "currentColor"
  };
  return React.createElement("svg", (0, _extends2.default)({}, iconProps, svgProps, {
    ref: ref
  }), title && React.createElement("title", {
    key: "VerticalAlignBottom-title"
  }, title), React.createElement("path", {
    d: "M16 13h-3V3h-2v10H8l4 4 4-4zM4 19v2h16v-2H4z",
    key: "k0"
  }));
});
var VerticalAlignBottom = (0, _styledComponents.default)(StyledIcon).withConfig({
  displayName: "VerticalAlignBottomcjs__VerticalAlignBottom",
  componentId: "sc-19ewsv0-0"
})(["display:inline-block;vertical-align:middle;overflow:hidden;"]);
exports.VerticalAlignBottom = VerticalAlignBottom;
VerticalAlignBottom.displayName = 'VerticalAlignBottom';
var VerticalAlignBottomDimensions = {
  height: 24,
  width: 24
};
exports.VerticalAlignBottomDimensions = VerticalAlignBottomDimensions;