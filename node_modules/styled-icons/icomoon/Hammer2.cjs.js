"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Hammer2Dimensions = exports.Hammer2 = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var StyledIcon = React.forwardRef(function (props, ref) {
  var title = props.title,
      size = props.size,
      svgProps = (0, _objectWithoutProperties2.default)(props, ["title", "size"]);
  var iconProps = {
    viewBox: '0 0 16 16',
    height: props.height !== undefined ? props.height : size,
    width: props.width !== undefined ? props.width : size,
    // @ts-ignore - aria is not always defined on SVG in React TypeScript types
    'aria-hidden': title == null ? 'true' : undefined,
    focusable: 'false',
    role: title != null ? 'img' : undefined,
    "fill": "currentColor"
  };
  return React.createElement("svg", (0, _extends2.default)({}, iconProps, svgProps, {
    ref: ref
  }), title && React.createElement("title", {
    key: "Hammer2-title"
  }, title), React.createElement("path", {
    d: "M15.784 14.309L7.212 6.505l.399-.4a1.83 1.83 0 0 0 .53-1.181.395.395 0 0 0 .046-.023l1.609-1.006a.676.676 0 0 0-.036-.898L6.961.191a.673.673 0 0 0-.896-.036L5.061 1.769l-.022.046c-.43.027-.852.204-1.178.531L2.339 3.873c-.327.327-.503.75-.53 1.181a.395.395 0 0 0-.046.023L.154 6.083a.676.676 0 0 0 .036.898l2.799 2.806a.673.673 0 0 0 .896.036l1.004-1.614.023-.046c.43-.027.852-.204 1.178-.531l.442-.443 7.783 8.596c.226.249.573.289.773.089l.787-.789c.199-.2.159-.549-.089-.775z",
    key: "k0"
  }));
});
var Hammer2 = (0, _styledComponents.default)(StyledIcon).withConfig({
  displayName: "Hammer2cjs__Hammer2",
  componentId: "jtoasx-0"
})(["display:inline-block;vertical-align:middle;overflow:hidden;"]);
exports.Hammer2 = Hammer2;
Hammer2.displayName = 'Hammer2';
var Hammer2Dimensions = {
  height: 16,
  width: 16
};
exports.Hammer2Dimensions = Hammer2Dimensions;