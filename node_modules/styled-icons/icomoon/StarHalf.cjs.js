"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StarHalfDimensions = exports.StarHalf = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var StyledIcon = React.forwardRef(function (props, ref) {
  var title = props.title,
      size = props.size,
      svgProps = (0, _objectWithoutProperties2.default)(props, ["title", "size"]);
  var iconProps = {
    viewBox: '0 0 16 16',
    height: props.height !== undefined ? props.height : size,
    width: props.width !== undefined ? props.width : size,
    // @ts-ignore - aria is not always defined on SVG in React TypeScript types
    'aria-hidden': title == null ? 'true' : undefined,
    focusable: 'false',
    role: title != null ? 'img' : undefined,
    "fill": "currentColor"
  };
  return React.createElement("svg", (0, _extends2.default)({}, iconProps, svgProps, {
    ref: ref
  }), title && React.createElement("title", {
    key: "StarHalf-title"
  }, title), React.createElement("path", {
    d: "M16 6.204l-5.528-.803L8 .392 5.528 5.401 0 6.204l4 3.899-.944 5.505L8 13.009l4.944 2.599L12 10.103l4-3.899zm-8 5.569l-.015.008L8 2.863 9.746 6.4l3.904.567-2.825 2.753.667 3.888L8 11.772z",
    key: "k0"
  }));
});
var StarHalf = (0, _styledComponents.default)(StyledIcon).withConfig({
  displayName: "StarHalfcjs__StarHalf",
  componentId: "v1x2j2-0"
})(["display:inline-block;vertical-align:middle;overflow:hidden;"]);
exports.StarHalf = StarHalf;
StarHalf.displayName = 'StarHalf';
var StarHalfDimensions = {
  height: 16,
  width: 16
};
exports.StarHalfDimensions = StarHalfDimensions;